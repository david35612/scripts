local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- NPC parameters
local NPCModelTemplate = Instance.new("Model")
local NPCPart = Instance.new("Part")
local Humanoid = Instance.new("Humanoid")

-- Create NPC Template
NPCModelTemplate.Name = "ChasingNPC"
NPCPart.Name = "HumanoidRootPart"
NPCPart.Size = Vector3.new(2, 5, 2)
NPCPart.Anchored = false
NPCPart.CanCollide = false
NPCPart.Material = Enum.Material.Neon
NPCPart.BrickColor = BrickColor.new("Bright blue")
NPCPart.Parent = NPCModelTemplate

Humanoid.Name = "Humanoid"
Humanoid.Parent = NPCModelTemplate

-- Function to spawn NPC
local function spawnNPC()
    local npc = NPCModelTemplate:Clone()
    npc.Parent = workspace

    -- Spawn NPC above the player
    local rootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        npc:SetPrimaryPartCFrame(rootPart.CFrame * CFrame.new(0, 10, 0)) -- Spawn 10 studs above
    end

    -- NPC movement logic
    local speed = 500
    RunService.Heartbeat:Connect(function()
        if npc.Parent and rootPart then
            local npcRoot = npc:FindFirstChild("HumanoidRootPart")
            if npcRoot then
                local direction = (rootPart.Position - npcRoot.Position).Unit
                npcRoot.Velocity = direction * speed
            end
        end
    end)

    -- Detect touch with player
    npc.HumanoidRootPart.Touched:Connect(function(hit)
        if hit.Parent == LocalPlayer.Character then
            LocalPlayer.Character:BreakJoints() -- Reset player if touched
        end
    end)

    -- Auto-destroy NPC after some time to prevent clutter
    task.delay(15, function()
        if npc.Parent then
            npc:Destroy()
        end
    end)
end

-- Spawn NPCs in a loop
for i = 1, 999 do
    task.delay(i * 0.1, function() -- Stagger spawning to prevent lag
        spawnNPC()
    end)
end
